name: Publish to PyPI

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]'
      - 'v[0-9]+.[0-9]+.[0-9]'
      - 'V[0-9]+.[0-9]+.[0-9]'

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v5

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          pip install -U ruff mypy

      - name: Set version from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}  # Extract the tag (e.g., v1.0.0 or V2.3.4)
          VERSION=${VERSION#v}              # Remove 'v' prefix if present
          VERSION=${VERSION#V}              # Remove 'V' prefix if present
          echo "Setting version to $VERSION"
          poetry version $VERSION

      - name: Run ruff format check
        if: always()
        run: poetry run ruff format --check --diff .

      - name: Run ruff lint check
        if: always()
        run: poetry run ruff check --diff .

      - name: Run tests with coverage
        if: always()
        run: poetry run pytest --cov=${{ github.event.repository.name }} --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build packages
        run: poetry build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
