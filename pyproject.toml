[tool.poetry]
name = "smartschool"
version = "0.3.0"
description = "Unofficial API interface to the smartschool system."
authors = ["Steven 'KaReL' Van Ingelgem <steven@vaningelgem.be>"]
readme = "README.md"
homepage = "https://github.com/svaningelgem/smartschool"
license = "GPL-3.0"
packages = [{include = "smartschool", from = "src"}]

[tool.poetry.urls]
"Source Code" = "https://github.com/svaningelgem/smartschool"
"Changelog" = "https://github.com/svaningelgem/smartschool/blob/master/CHANGELOG.md"
"License" = "https://github.com/svaningelgem/smartschool/blob/master/LICENSE"

[tool.poetry.scripts]
smartschool_report_on_results = {reference = "scripts/smartschool_report_on_results", type = "file"}
smartschool_report_on_future_tasks = {reference = "scripts/smartschool_report_on_future_tasks", type = "file"}

[tool.poetry.dependencies]
python = "^3.11"
bs4 = "*"
requests = "*"
pyyaml = "*"
pydantic = "*"

[tool.poetry.group.dev.dependencies]
pytest-mock = "*"
pytest-cov = "*"
requests-mock = "*"
ruff = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
testpaths = [
    "tests",
]
python_files = ['*_tests.py', '*_test.py']
pythonpath = [
    "."
]
requests_mock_case_sensitive = true

[tool.ruff]
line-length = 160
fix = true

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "F", # Pyflakes
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # flake8-docstrings
    "I", # isort
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "PT", # flake8-pytest-style
    "RUF", # Ruff-specific rules
    "PTH", # flake8-use-pathlib
    "FA", # flake8-future-annotations
    "PIE", # flake8-pie
    "TD", # flake8-todos
    "TRY", # tryceratops
    "FBT001", # flake8-boolean-trap
]

ignore = [
    # Line length regulated by black
    "E501",
    # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
    # numpy convention with a few additional lints
    "D107",
    "D203",
    "D212",
    "D401",
    "D402",
    "D415",
    "D416",
    # flake8-pytest-style:
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    # flake8-simplify
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM108", # Use ternary operator
    # ruff
    "RUF005", # unpack-instead-of-concatenating-to-collection-literal
    # pycodestyle
    # TODO: Remove errors below to further improve docstring linting
    # Ordered from most common to least common errors.
    "D105", # Missing docstring in magic method
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    # flake8-todos
    "TD002", # Missing author in TODO
    "TD003", # Missing issue link on the line following this TODO
    # tryceratops
    "TRY003", # Avoid specifying long messages outside the exception class
    # Lints below are turned off because of conflicts with the ruff formatter
    "D206",
    "W191",

    "TID252",  # Relative imports are banned
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 160

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D100", "D103", "B018", "FBT001"]